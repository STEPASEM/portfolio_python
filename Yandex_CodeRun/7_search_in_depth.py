"""
Ссылка: https://coderun.yandex.ru/problem/search-in-depth

Тип: Легкая

Раздел: Алгоритмы

Дан неориентированный граф, возможно с петлями и кратными ребрами. Необходимо найти компоненту связности,
содержащую вершину с номером 1.

Формат ввода
В первой строке записаны два целых числа N и M — количество вершин и ребер в графе.
В последующих M строках перечислены ребра — пары чисел, определяющие номера вершин, которые соединяют ребра.
Вершины нумеруются с единицы.

Формат вывода
В первой строке выведите число K — количество вершин в компоненте связности.
Во второй строке выведите K целых чисел — вершины компоненты связности, перечисленные в порядке возрастания номеров.

Примечание
Петля в графе — это ребро, которое соединяет вершину с самой собой.
Кратные рёбра в графе — это рёбра, которые соединяют одну и ту же пару вершин.
Компонента связности в неориентированном графе — это подмножество вершин таких, что все вершины достижимы друг из друга.
"""
from collections import deque

def graf(reb):
    S = set()
    time_line = deque([0])

    while time_line:
        top = time_line.popleft()
        if top not in S:
            S.add(top)
            for top_line in reb[top]:
                if top_line not in S:
                    time_line.append(top_line)
    return S

def main():
    N, M = map(int, input().split())
    reb = [[] for _ in range(N)]
    for _ in range(M):
        a, b = map(int, input().split())
        reb[a - 1].append(b - 1)
        reb[b - 1].append(a - 1)
    K = graf(reb)
    print(len(K))
    for strok in K:
        print(strok+1, end=" ")

if __name__ == '__main__':
    main()